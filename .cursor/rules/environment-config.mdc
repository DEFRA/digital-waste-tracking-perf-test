---
description: Environment Configuration and Management Rules
globs:
alwaysApply: true
---

# Environment Configuration and Management Rules

## Environment Variable Strategy
This repository uses a **command-line properties approach** for JMeter configuration, which provides maximum flexibility and clear separation between configuration and business logic.

## File Structure
- `env.sh` - Local development environment variables (gitignored)
- `env.sh.template` - Template showing required environment variables
- `local-entrypoint.sh` - Local development script with all JMeter properties
- `entrypoint.sh` - Production script for CI/CD environments
- `.gitignore` - Excludes sensitive environment files

## Environment Variable Flow
1. **Development**: Load `env.sh` to set environment variables
2. **Scripts**: Pass environment variables as JMeter properties via `-J` parameters
3. **JMeter**: Uses `${__P(propertyName)}` to access properties in test plans
4. **CI/CD**: Environment variables are set by the CI/CD system

## Configuration Files

### env.sh (Local Development)
```bash
#!/bin/sh
# Usage: source ./env.sh

export ENVIRONMENT=dev
export COGNITO_CLIENT_ID=your-client-id
export COGNITO_CLIENT_SECRET=your-client-secret
export COGNITO_OAUTH_BASE_URL=waste-movement-external-api-c63f2.auth.eu-west-2.amazoncognito.com
export ORGANISATION_API_ID=your-org-id
```

### local-entrypoint.sh (Local Development)
```bash
#!/bin/bash
source ./env.sh

jmeter -n -t scenarios/create-waste-movement/successfully/baseline-test.jmx \
  -l results.jtl -e -o reports/ \
  -Jenvironment=${ENVIRONMENT} \
  -JorganisationApiId=${ORGANISATION_API_ID} \
  -JclientId=${COGNITO_CLIENT_ID} \
  -JclientSecret=${COGNITO_CLIENT_SECRET} \
  -JauthBaseUrl=${COGNITO_OAUTH_BASE_URL} \
  -Jjmeter.save.saveservice.response_data=true \
  # ... additional JMeter properties
```

## Usage Patterns

### Local Development
```bash
# Load environment variables and run test
./local-entrypoint.sh
```

### Using Entrypoint Script
```bash
# Entrypoint automatically loads env.sh if present
ENVIRONMENT=dev TEST_SCENARIO=create-waste-movement/successfully/baseline-test ./entrypoint.sh
```

### CI/CD Environment
```bash
# Environment variables are set by CI/CD system
# Scripts pass them as JMeter properties
./entrypoint.sh
```

## Required Environment Variables
- `ENVIRONMENT`: Target environment (dev, test, perf-test, prod)
- `TEST_SCENARIO`: JMX file path or "all" for all tests
- `CI`: "true" for CDP Platform, "false" for local development
- `COGNITO_CLIENT_ID`: OAuth2 client ID
- `COGNITO_CLIENT_SECRET`: OAuth2 client secret
- `COGNITO_OAUTH_BASE_URL`: OAuth2 base URL
- `ORGANISATION_API_ID`: Organization API ID

## Test Execution Flow
1. **Cleanup**: Removes previous test results from `reports/`, `logs/`, `results/` directories
2. **Authentication**: Gets OAuth2 token using shared authentication script
3. **Test Execution**: Runs JMX files with proper environment variables
4. **Report Generation**: Creates HTML report from CSV results
5. **Output**: Opens report in browser (local) or uploads to S3 (CI)

## Directory Structure
- `scenarios/`: JMX test files organized by operation and test type
- `scripts/`: Groovy scripts for authentication and payload generation
- `reports/`: Generated HTML reports (gitignored)
- `logs/`: JMeter execution logs (gitignored)
- `results/`: CSV result files (gitignored)
- `temp/`: Temporary files generated during test execution (gitignored)

## Security Guidelines
1. **Never commit** `env.sh` with real credentials
2. **Use** `env.sh.template` as a template for required variables
3. **Add** new environment files to `.gitignore`
4. **Rotate** credentials regularly
5. **Use** CI/CD secrets for production environments

## Adding New Environment Variables
1. Add to `env.sh.template` with placeholder values
2. Add to `env.sh` with real values (local only)
3. Add `-JpropertyName=${VARIABLE_NAME}` to entrypoint scripts
4. Update CI/CD environment configuration
5. Use `${__P(propertyName)}` in JMeter test plans
6. Document the new variable in this file

## Troubleshooting
- **Variables not loading**: Ensure `env.sh` is sourced before running scripts
- **Empty values**: Check that environment variables are exported (not just set)
- **Wrong values**: Verify scripts pass correct variable names as properties
- **CI/CD issues**: Ensure environment variables are set in CI/CD system

## Benefits of This Approach
- **Clean**: All configuration externalized from JMX files
- **Maintainable**: Properties managed in scripts, not test plans
- **Secure**: Sensitive values in gitignored files
- **Flexible**: Easy to override for different environments
- **Debuggable**: Clear separation between config and business logic
- **Portable**: Test plans work across environments without modification